{"version":3,"sources":["scripts/main.js"],"names":["todosFromServer","id","title","completed","root","document","querySelector","newTodoField","itemsList","allToggler","clearCompletedButton","filter","initTodos","todos","todo","insertAdjacentHTML","updateInfo","completedTogglers","querySelectorAll","activeTogglers","counter","footer","toggleAllContainer","innerHTML","length","checked","hidden","hasTodos","addEventListener","event","target","dataset","filterButtons","button","classList","toggle","togglers","toggler","item","closest","remove","key","value","Date","matches"],"mappings":"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","file":"main.953ec764.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst todosFromServer = [\n  {\n    id: 1, title: 'HTML', completed: true,\n  },\n  {\n    id: 2, title: 'CSS', completed: true,\n  },\n  {\n    id: 3, title: 'JavaScript', completed: false,\n  },\n];\n\nconst root = document.querySelector('.todoapp');\n\nconst newTodoField = document.querySelector('.new-todo');\nconst itemsList = root.querySelector('.todo-list');\nconst allToggler = root.querySelector('.toggle-all');\nconst clearCompletedButton = root.querySelector('.clear-completed');\nconst filter = root.querySelector('.filters');\n\ninitTodos(todosFromServer);\n\nfunction initTodos(todos) {\n  for (const todo of todos) {\n    itemsList.insertAdjacentHTML(\n      'beforeend', `\n      <li class=\"todo-item ${todo.completed ? 'completed' : ''}\">\n        <input\n          id=\"todo-${todo.id}\"\n          class=\"toggle\"\n          type=\"checkbox\"\n          ${todo.completed ? 'checked' : ''}\n        >\n        <label for=\"todo-${todo.id}\">${todo.title}</label>\n        <button class=\"destroy\"></button>\n      </li>\n    `);\n  }\n\n  updateInfo();\n}\n\nfunction updateInfo() {\n  const completedTogglers = root.querySelectorAll('.toggle:checked');\n  const activeTogglers = root.querySelectorAll('.toggle:not(:checked)');\n  const counter = root.querySelector('.todo-count');\n  const footer = root.querySelector('.footer');\n  const toggleAllContainer = root.querySelector('.toggle-all-container');\n\n  counter.innerHTML = `${activeTogglers.length} item left`;\n  allToggler.checked = activeTogglers.length === 0;\n  clearCompletedButton.hidden = completedTogglers.length === 0;\n\n  const hasTodos = completedTogglers.length > 0 || activeTogglers.length > 0;\n\n  footer.hidden = !hasTodos;\n  toggleAllContainer.hidden = !hasTodos;\n}\n\nfilter.addEventListener('click', (event) => {\n  if (!event.target.dataset.filter) {\n    return;\n  }\n\n  const filterButtons = root.querySelectorAll('[data-filter]');\n\n  for (const button of filterButtons) {\n    button.classList.toggle('selected', event.target === button);\n  }\n\n  const togglers = root.querySelectorAll('.toggle');\n\n  for (const toggler of togglers) {\n    const item = toggler.closest('.todo-item');\n\n    switch (event.target.dataset.filter) {\n      case 'all':\n        item.hidden = false;\n        break;\n\n      case 'active':\n        item.hidden = toggler.checked;\n        break;\n\n      case 'completed':\n        item.hidden = !toggler.checked;\n    }\n  }\n});\n\nclearCompletedButton.addEventListener('click', () => {\n  const completedTogglers = root.querySelectorAll('.toggle:checked');\n\n  for (const toggler of completedTogglers) {\n    toggler.closest('.todo-item').remove();\n  }\n\n  updateInfo();\n});\n\nallToggler.addEventListener('change', () => {\n  const togglers = root.querySelectorAll('.toggle');\n\n  // if (allToggler.checked) {\n  //   for (const toggler of togglers) {\n  //     toggler.checked = true;\n  //     toggler.closest('.todo-item').classList.add('completed');\n  //   }\n  // } else {\n  //   for (const toggler of togglers) {\n  //     toggler.checked = false;\n  //     toggler.closest('.todo-item').classList.remove('completed');\n  //   }\n  // }\n\n  for (const toggler of togglers) {\n    toggler.checked = allToggler.checked;\n\n    toggler.closest('.todo-item')\n      .classList.toggle('completed', allToggler.checked);\n  }\n\n  updateInfo();\n});\n\nnewTodoField.addEventListener('keydown', (event) => {\n  if (event.key !== 'Enter') {\n    return;\n  }\n\n  if (!newTodoField.value) {\n    return;\n  }\n\n  const id = +new Date();\n\n  itemsList.insertAdjacentHTML('beforeend', `\n    <li class=\"todo-item\">\n      <input\n        id=\"todo-${id}\"\n        class=\"toggle\"\n        type=\"checkbox\"\n      >\n      <label for=\"todo-${id}\">${newTodoField.value}</label>\n      <button class=\"destroy\"></button>\n    </li>\n  `);\n\n  newTodoField.value = '';\n  updateInfo();\n});\n\nitemsList.addEventListener('click', (event) => {\n  if (!event.target.matches('.destroy')) {\n    return;\n  }\n\n  event.target.closest('.todo-item').remove();\n  updateInfo();\n});\n\nitemsList.addEventListener('change', (event) => {\n  if (!event.target.matches('.toggle')) {\n    return;\n  }\n\n  event.target.closest('.todo-item')\n    .classList.toggle('completed', event.target.checked);\n  updateInfo();\n});\n"]}